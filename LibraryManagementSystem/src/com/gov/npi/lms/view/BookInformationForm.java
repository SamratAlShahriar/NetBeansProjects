package com.gov.npi.lms.view;

import com.gov.npi.lms.connection.DbConnection;
import com.gov.npi.lms.domain.BookInformation;
import com.gov.npi.lms.domain.BookIssueReturn;
import com.gov.npi.lms.domain.BookSummary;
import com.gov.npi.lms.navigation.NavigationMenu;
import com.gov.npi.lms.service.BookInformationService;
import com.gov.npi.lms.service.BookIssueReturnService;
import com.gov.npi.lms.service.BookSummaryService;
import com.gov.npi.lms.tools.PopUpMessage;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Samrat Al Shahriar Nayeem
 */
public class BookInformationForm extends javax.swing.JFrame {
    
    Connection conn = DbConnection.getConnection();

    /**
     * Creates new form BookForm
     */
    public BookInformationForm() {
        initComponents();
        refreshTable();
        this.setExtendedState(MAXIMIZED_BOTH);
        setJMenuBar(NavigationMenu.commonNavMenu(this));
        setAppIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        txtBookName = new javax.swing.JTextField();
        txtAuthorName = new javax.swing.JTextField();
        txtPublisher = new javax.swing.JTextField();
        txtEdition = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtRackNo = new javax.swing.JTextField();
        txtIsbnNo = new javax.swing.JTextField();
        cmbCategory = new javax.swing.JComboBox<>();
        cmbPurchaseDay = new javax.swing.JComboBox<>();
        cmbPurchaseMonth = new javax.swing.JComboBox<>();
        cmbPurchaseYear = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblMsg = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplay = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Book Information || LMS");

        jPanel2.setBackground(new java.awt.Color(1, 153, 51));

        jLabel17.setBackground(new java.awt.Color(0, 204, 204));
        jLabel17.setFont(new java.awt.Font("Monotype Corsiva", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 255, 204));
        jLabel17.setText("Library Management System");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 255, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Book Information");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Accession No :");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Book Name :");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Author Name :");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Publisher :");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Edition :");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setText("Price :");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel13.setText("Rack No:");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel14.setText("ISBN No:");

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel15.setText("Category:");

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel16.setText("Purchase Date:");

        txtBookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookIDActionPerformed(evt);
            }
        });

        cmbCategory.setEditable(true);
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category", "Comedy", "Computer", "Drama", "Fantasy", "Horror Fiction", "Literary Realism", "Mythology", "Novel", "Other", "Romance", "Satire", "Science Fiction", "Technology", "Tragedy", "Tragicomedy" }));

        cmbPurchaseDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        cmbPurchaseMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        cmbPurchaseYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000" }));

        btnAdd.setBackground(new java.awt.Color(51, 153, 0));
        btnAdd.setText("Add");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(204, 255, 102));
        btnEdit.setText("Edit");
        btnEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 204, 153));
        btnDelete.setText("Delete");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Quantity");

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(65, 65, 65))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAdd)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEdit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnDelete))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(cmbPurchaseDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbPurchaseMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbPurchaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtRackNo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel14)
                                        .addComponent(jLabel15)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(31, 31, 31)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtBookID, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                                    .addComponent(txtBookName)
                                                    .addComponent(txtAuthorName))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(txtEdition, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                                    .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtQuantity, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtPublisher, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtIsbnNo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRackNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtIsbnNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(cmbPurchaseDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPurchaseMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPurchaseYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Accession No", "Book Name", "Author Name", "Publisher", "Edition", "Price", "Quantity", "Category", "Rack No", "ISBN No", "Purchase Date"
            }
        ));
        tblDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDisplayMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        BookInformationService bookInformationService = new BookInformationService();
        BookSummaryService bookSummaryService = new BookSummaryService();
        
        BookInformation bi = bookInformationService.getBookInformationByBookID(txtBookID.getText());
        try {
            
            if (bi != null) {
                if (txtBookID.getText().equals(bi.getBookId())) {
                    //data from db
                    PopUpMessage.popUpMsgBox("The Accession No. is already exist", "Book Information", WIDTH);
                } else if (txtBookID.getText().equals("")) {
                    lblMsg.setText("You can't leave \'Accession No.\' blank");
                } else if (txtBookName.getText().equals("")) {
                    lblMsg.setText("You can't leave \'Book Name\' blank");
                } else if (txtAuthorName.getText().equals("")) {
                    lblMsg.setText("You can't leave \'Autor Name\' blank");
                } else if (txtPublisher.getText().equals("")) {
                    lblMsg.setText("You can't leave \'Publisher\' blank");
                } else if (txtPrice.getText().equals("")) {
                    lblMsg.setText("You can't leave \'Price\' blank");
                } else if (txtQuantity.getText().equals("")) {
                    lblMsg.setText("You can't leave \'Quantity\' blank");
                } else if (cmbCategory.getSelectedItem().equals("Select Category")) {
                    lblMsg.setText("You have to select a category.");
                } else if (cmbPurchaseDay.getSelectedItem().equals("Day") || cmbPurchaseMonth.getSelectedItem().equals("Month") || cmbPurchaseYear.getSelectedItem().equals("Year")) {
                    lblMsg.setText("Please enter a valid day.");
                } else {
                    //for adding new book information & book summary
                    BookSummary bsadd = new BookSummary(txtBookID.getText(), txtBookName.getText(), Integer.parseInt(txtQuantity.getText()), 0, Integer.parseInt(txtQuantity.getText()), 0);
                    bookSummaryService.saveWhenBookPurchase(bsadd);
                    
                    BookInformation book = new BookInformation(txtBookID.getText(), txtBookName.getText(), txtAuthorName.getText(), txtPublisher.getText(), txtEdition.getText(), txtPrice.getText(), txtQuantity.getText(), cmbCategory.getSelectedItem().toString(), txtRackNo.getText(), txtIsbnNo.getText(), cmbPurchaseDay.getSelectedItem().toString(), cmbPurchaseMonth.getSelectedItem().toString(), cmbPurchaseYear.getSelectedItem().toString());
                    bookInformationService.add(book);
                    
                    lblMsg.setText("1 Record Successfully Added!");
                    refreshTable();
                }
            } else {
                System.out.println("error");
            }
            
        } catch (NumberFormatException e) {
            refreshTable();
        }
        
        refreshTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        BookInformationService bookInformationService = new BookInformationService();
        BookSummaryService bookSummaryService = new BookSummaryService();
        
        BookInformation bi = bookInformationService.getBookInformationByBookID(txtBookID.getText());
        if (bi.getBookId() != null) {
            if (txtBookID.getText().equals("")) {
                lblMsg.setText("You can't leave \'Accession No.\' blank");
            } else if (txtBookName.getText().equals("")) {
                lblMsg.setText("You can't leave \'Book Name\' blank");
            } else if (txtAuthorName.getText().equals("")) {
                lblMsg.setText("You can't leave \'Autor Name\' blank");
            } else if (txtPublisher.getText().equals("")) {
                lblMsg.setText("You can't leave \'Publisher\' blank");
            } else if (txtPrice.getText().equals("")) {
                lblMsg.setText("You can't leave \'Price\' blank");
            } else if (txtQuantity.getText().equals("")) {
                lblMsg.setText("You can't leave \'Quantity\' blank");
            } else if (cmbCategory.getSelectedItem().equals("Select Category")) {
                lblMsg.setText("You have to select a category.");
            } else if (cmbPurchaseDay.getSelectedItem().equals("Day") || cmbPurchaseMonth.getSelectedItem().equals("Month") || cmbPurchaseYear.getSelectedItem().equals("Year")) {
                lblMsg.setText("Please enter a valid day.");
            } else if (txtBookID.getText().equals(bi.getBookId())) {
                //for book information update
                BookInformation book = new BookInformation(txtBookID.getText(), txtBookName.getText(), txtAuthorName.getText(), txtPublisher.getText(), txtEdition.getText(), txtPrice.getText(), txtQuantity.getText(), cmbCategory.getSelectedItem().toString(), txtRackNo.getText(), txtIsbnNo.getText(), cmbPurchaseDay.getSelectedItem().toString(), cmbPurchaseMonth.getSelectedItem().toString(), cmbPurchaseYear.getSelectedItem().toString());
                int row = tblDisplay.getSelectedRow();
                TableModel model = tblDisplay.getModel();
                book.setBookId(txtBookID.getText());//model.getValueAt(row, 0).toString());
                bookInformationService.update(book, txtBookID.getText());

                //for book summary update
                BookSummaryService bookSumSer = new BookSummaryService();
                BookSummary bkSum = bookSumSer.getBookSummaryByBookId(txtBookID.getText());
                int alreadyLend = bkSum.getAlreadyLend();
                int NowAvalibaleStock = Integer.parseInt(txtQuantity.getText()) - alreadyLend;
                BookSummary bsupd = new BookSummary(txtBookID.getText(), txtBookName.getText(), Integer.parseInt(txtQuantity.getText()), NowAvalibaleStock);
                bsupd.setBookId(txtBookID.getText());
                bookSummaryService.update(bsupd, txtBookID.getText());
                
                lblMsg.setText("1 Record Successfully Updated!");
                refreshTable();
            } else {
                lblMsg.setText("Please select a book to update.");
            }
            
        } else {
            lblMsg.setText("Invalid accession no. to update.");
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void tblDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDisplayMouseClicked
        int row = tblDisplay.getSelectedRow();
        TableModel model = tblDisplay.getModel();
        String bkID = model.getValueAt(row, 0).toString();
        try {
            
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM lmsdb_book_information WHERE book_id=?");
            stmt.setString(1, bkID);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                txtBookID.setText(rs.getString(2));
                txtBookName.setText(rs.getString(3));
                txtAuthorName.setText(rs.getString(4));
                txtPublisher.setText(rs.getString(5));
                txtEdition.setText(rs.getString(6));
                txtPrice.setText(rs.getString(7));
                txtQuantity.setText(rs.getString(8));
                cmbCategory.setSelectedItem(rs.getString(9));
                txtRackNo.setText(rs.getString(10));
                txtIsbnNo.setText(rs.getString(11));
                cmbPurchaseDay.setSelectedItem(rs.getString(12));
                cmbPurchaseMonth.setSelectedItem(rs.getString(13));
                cmbPurchaseYear.setSelectedItem(rs.getString(14));
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(BookInformation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblDisplayMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        BookInformation bkinfo = new BookInformation();
        BookInformationService bookInformationService = new BookInformationService();
        
        BookSummary bksum = new BookSummary();
        BookSummaryService bookSummaryService = new BookSummaryService();
        
        BookIssueReturn bkIR = new BookIssueReturn();
        BookIssueReturnService bookIssueReturnService = new BookIssueReturnService();
        
        int row = tblDisplay.getSelectedRow();
        TableModel model = tblDisplay.getModel();
        bkinfo.setBookId(((model.getValueAt(row, 0)).toString())); //set BookId for delete from Book Information        
        bookInformationService.delete(bkinfo.getBookId()); //to delete from Book Information

        bksum.setBookId((model.getValueAt(row, 0)).toString()); //set BookId for delete from Book Summary
        bookSummaryService.delete(bksum.getBookId());//to delete from Book Summary
        
        bkIR.setBookId((model.getValueAt(row, 0)).toString()); //set BookId for delete from Book Issue Return
        bookIssueReturnService.deleteBook(bkIR.getBookId());
        
        lblMsg.setText("1 Record Successfully Deleted!");
        refreshTable();
        PopUpMessage.popUpMsgBox("You have successfully deleted a book information.", "Message", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtBookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookIDActionPerformed
        try {
            BookInformationService bookInfoService = new BookInformationService();
            BookInformation bookSum = bookInfoService.getBookInformationByBookID(txtBookID.getText());
            
            if (txtBookID.getText().equals(bookSum.getBookId())) {
                PreparedStatement stmt = conn.prepareStatement("SELECT * FROM lmsdb_book_information WHERE book_id=?");
                stmt.setString(1, txtBookID.getText());
                ResultSet rs = stmt.executeQuery();
                while (rs.next()) {
                    txtBookID.setText(rs.getString(2));
                    txtBookName.setText(rs.getString(3));
                    txtAuthorName.setText(rs.getString(4));
                    txtPublisher.setText(rs.getString(5));
                    txtEdition.setText(rs.getString(6));
                    txtPrice.setText(rs.getString(7));
                    txtQuantity.setText(rs.getString(8));
                    cmbCategory.setSelectedItem(rs.getString(9));
                    txtRackNo.setText(rs.getString(10));
                    txtIsbnNo.setText(rs.getString(11));
                    cmbPurchaseDay.setSelectedItem(rs.getString(12));
                    cmbPurchaseMonth.setSelectedItem(rs.getString(13));
                    cmbPurchaseYear.setSelectedItem(rs.getString(14));

                    //for table display
                    BookInformationService bookInformationService = new BookInformationService();
                    List<BookInformation> pList = bookInformationService.getListByBookID(txtBookID.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
//                    model.setColumnCount(0);
//                    String columnAdd[] = {"Accession No", "Book Name", "Author", "Publisher", "Edition", "Price", "Quantity", "Category", "Rack No.", "ISBN No", "Purchase Date"};
//                    for (String a : columnAdd) {
//                        model.addColumn(a);
//                    }

                    model.setRowCount(0);
                    Object[] row = new Object[11];
                    
                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getBookId();
                        row[1] = pList.get(i).getBookName();
                        row[2] = pList.get(i).getAuthor();
                        row[3] = pList.get(i).getPublisher();
                        row[4] = pList.get(i).getEdition();
                        row[5] = pList.get(i).getPrice();
                        row[6] = pList.get(i).getQuantity();
                        row[7] = pList.get(i).getCategory();
                        row[8] = pList.get(i).getRackNo();
                        row[9] = pList.get(i).getIsbnNo();
                        row[10] = pList.get(i).getPurchaseDay() + "-" + pList.get(i).getPurchaseMonth() + "-" + pList.get(i).getPurchaseYear();
                        
                        model.addRow(row);
                    }
                    
                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(180);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(9).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(10).setPreferredWidth(80);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
                    
                }
                lblMsg.setText("");
            } else {
                txtBookName.setText("");
                txtAuthorName.setText("");
                txtPublisher.setText("");
                txtEdition.setText("");
                txtPrice.setText("");
                txtQuantity.setText("");
                cmbCategory.setSelectedIndex(0);
                txtRackNo.setText("");
                txtIsbnNo.setText("");
                cmbPurchaseDay.setSelectedIndex(0);
                cmbPurchaseMonth.setSelectedIndex(0);
                cmbPurchaseYear.setSelectedIndex(0);
                lblMsg.setText("No book information found.");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(BookInformation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtBookIDActionPerformed
    
    public void displayDatasWithinTable() {
        BookInformationService bookInformationService = new BookInformationService();
        List<BookInformation> pList = bookInformationService.getList();
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        Object[] row = new Object[11];
        
        for (int i = 0; i < pList.size(); i++) {
            row[0] = pList.get(i).getBookId();
            row[1] = pList.get(i).getBookName();
            row[2] = pList.get(i).getAuthor();
            row[3] = pList.get(i).getPublisher();
            row[4] = pList.get(i).getEdition();
            row[5] = pList.get(i).getPrice();
            row[6] = pList.get(i).getQuantity();
            row[7] = pList.get(i).getCategory();
            row[8] = pList.get(i).getRackNo();
            row[9] = pList.get(i).getIsbnNo();
            row[10] = pList.get(i).getPurchaseDay() + "-" + pList.get(i).getPurchaseMonth() + "-" + pList.get(i).getPurchaseYear();
            
            model.addRow(row);
        }
        
        tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(60);
        tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(180);
        tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(120);
        tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(40);
        tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(60);
        tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
        tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(80);
        tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(40);
        tblDisplay.getColumnModel().getColumn(9).setPreferredWidth(120);
        tblDisplay.getColumnModel().getColumn(10).setPreferredWidth(80);
        tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        
    }
    
    public void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
        model.setRowCount(0);
        displayDatasWithinTable();
    }
    
    public void setAppIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/gov/npi/lms/images/lms-icon.png")));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookInformationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookInformationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookInformationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookInformationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookInformationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbPurchaseDay;
    private javax.swing.JComboBox<String> cmbPurchaseMonth;
    private javax.swing.JComboBox<String> cmbPurchaseYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JTable tblDisplay;
    private javax.swing.JTextField txtAuthorName;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtEdition;
    private javax.swing.JTextField txtIsbnNo;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtRackNo;
    // End of variables declaration//GEN-END:variables
}

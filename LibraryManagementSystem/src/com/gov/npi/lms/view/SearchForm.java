package com.gov.npi.lms.view;

import com.gov.npi.lms.domain.BookInformation;
import com.gov.npi.lms.domain.BookIssueReturn;
import com.gov.npi.lms.domain.Student;
import com.gov.npi.lms.navigation.NavigationMenu;
import com.gov.npi.lms.service.BookInformationService;
import com.gov.npi.lms.service.BookIssueReturnService;
import com.gov.npi.lms.service.StudentService;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Md. Samrat AL Shahriar Nayeem
 */
public class SearchForm extends javax.swing.JFrame {

    /**
     * Creates new form SearchForm
     */
    public SearchForm() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        setJMenuBar(NavigationMenu.commonNavMenu(this));
        cmbSubCategory.setEnabled(false);
        cmbDeSubCategory.setEnabled(false);
        txtSearch.setEnabled(false);
        setAppIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cmbMainCategory = new javax.swing.JComboBox<>();
        cmbSubCategory = new javax.swing.JComboBox<>();
        buttonSearch = new javax.swing.JButton();
        cmbDeSubCategory = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        lblMsg = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDisplay = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search || LMS");

        jPanel3.setBackground(new java.awt.Color(0, 153, 51));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 255, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Search");

        jLabel17.setBackground(new java.awt.Color(0, 204, 204));
        jLabel17.setFont(new java.awt.Font("Monotype Corsiva", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 255, 204));
        jLabel17.setText("Library Management System");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 450, Short.MAX_VALUE))
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        cmbMainCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbMainCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Search By-----", "Book Info", "Student Info", "Isuue Or Return Info" }));
        cmbMainCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMainCategoryItemStateChanged(evt);
            }
        });
        cmbMainCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMainCategoryActionPerformed(evt);
            }
        });

        cmbSubCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbSubCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSubCategoryActionPerformed(evt);
            }
        });

        buttonSearch.setBackground(new java.awt.Color(204, 255, 204));
        buttonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gov/npi/lms/images/lms-search-icon.png"))); // NOI18N
        buttonSearch.setText("Search");
        buttonSearch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        cmbDeSubCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtSearch.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N

        lblMsg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMsg.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        tblDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(cmbMainCategory, 0, 1, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSubCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbDeSubCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSearch)))
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMainCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDeSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonSearch)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbMainCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMainCategoryItemStateChanged

    }//GEN-LAST:event_cmbMainCategoryItemStateChanged

    private void cmbMainCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMainCategoryActionPerformed
        lblMsg.setText("");
        if (cmbMainCategory.getSelectedItem().equals("-----Search By-----")) {
            cmbSubCategory.setEnabled(false);
            cmbDeSubCategory.setEnabled(false);
            txtSearch.setEnabled(false);
        } else if (cmbMainCategory.getSelectedItem().equals("Book Info")) {
            cmbSubCategory.setEnabled(true);
            cmbDeSubCategory.setEnabled(false);
            cmbSubCategory.removeAllItems();
            String bookInfoCat[] = {"Accession No", "Book Title", "Author", "Publisher"};
            for (String a : bookInfoCat) {
                cmbSubCategory.addItem(a);
            }
            txtSearch.setEnabled(true);
        } else if (cmbMainCategory.getSelectedItem().equals("Student Info")) {
            cmbSubCategory.setEnabled(true);
            cmbDeSubCategory.setEnabled(false);
            cmbSubCategory.removeAllItems();
            String stuInfoCat[] = {"Name", "Roll No", "Reg No", "Phone No"};
            for (String a : stuInfoCat) {
                cmbSubCategory.addItem(a);
            }
            txtSearch.setEnabled(true);
        } else if (cmbMainCategory.getSelectedItem().equals("Isuue Or Return Info")) {
            cmbSubCategory.setEnabled(true);
            //cmbDeSubCategory.setEnabled(false);
            cmbSubCategory.removeAllItems();
            String issRetInfoCat[] = {"Issue ID", "Accession No", "Student ID"};
            for (String a : issRetInfoCat) {
                cmbSubCategory.addItem(a);
            }
        } else {
            cmbSubCategory.removeAllItems();
            cmbSubCategory.setEnabled(false);
        }

    }//GEN-LAST:event_cmbMainCategoryActionPerformed

    private void cmbSubCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSubCategoryActionPerformed
        try {
            if (cmbMainCategory.getSelectedItem().equals("Isuue Or Return Info") && cmbSubCategory.getSelectedItem().equals("Accession No")) {
                cmbDeSubCategory.setEnabled(true);
                cmbDeSubCategory.removeAllItems();
                String acnRoN[] = {"Returned", "Not Returned"};
                for (String a : acnRoN) {
                    cmbDeSubCategory.addItem(a);
                }
                txtSearch.setEnabled(true);
            } else if (cmbMainCategory.getSelectedItem().equals("Isuue Or Return Info") && cmbSubCategory.getSelectedItem().equals("Student ID")) {
                cmbDeSubCategory.setEnabled(true);
                cmbDeSubCategory.removeAllItems();
                String stRoN[] = {"Returned", "Not Returned"};
                for (String a : stRoN) {
                    cmbDeSubCategory.addItem(a);
                }
                txtSearch.setEnabled(true);
            } else {
                cmbDeSubCategory.setEnabled(false);
                txtSearch.setEnabled(true);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmbSubCategoryActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        try {
            if (cmbMainCategory.getSelectedItem().equals("-----Search By-----")) {
                lblMsg.setText("*Please select a category.");
            } else if (cmbMainCategory.getSelectedItem().equals("Book Info")) {
                if (cmbSubCategory.getSelectedItem().equals("Accession No")) {
                    BookInformationService bookInformationService = new BookInformationService();
                    List<BookInformation> pList = bookInformationService.getListByBookID(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"Accession No", "Book Name", "Author", "Publisher", "Edition", "Price", "Quantity", "Category", "Rack No.", "ISBN No", "Purchase Date"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);
                    Object[] row = new Object[11];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getBookId();
                        row[1] = pList.get(i).getBookName();
                        row[2] = pList.get(i).getAuthor();
                        row[3] = pList.get(i).getPublisher();
                        row[4] = pList.get(i).getEdition();
                        row[5] = pList.get(i).getPrice();
                        row[6] = pList.get(i).getQuantity();
                        row[7] = pList.get(i).getCategory();
                        row[8] = pList.get(i).getRackNo();
                        row[9] = pList.get(i).getIsbnNo();
                        row[10] = pList.get(i).getPurchaseDay() + "-" + pList.get(i).getPurchaseMonth() + "-" + pList.get(i).getPurchaseYear();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(180);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(9).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(10).setPreferredWidth(80);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                } else if (cmbSubCategory.getSelectedItem().equals("Book Title")) {
                    BookInformationService bookInformationService = new BookInformationService();
                    List<BookInformation> pList = bookInformationService.getListByBookName(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"Accession No", "Book Name", "Author", "Publisher", "Edition", "Price", "Quantity", "Category", "Rack No.", "ISBN No", "Purchase Date"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);
                    Object[] row = new Object[11];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getBookId();
                        row[1] = pList.get(i).getBookName();
                        row[2] = pList.get(i).getAuthor();
                        row[3] = pList.get(i).getPublisher();
                        row[4] = pList.get(i).getEdition();
                        row[5] = pList.get(i).getPrice();
                        row[6] = pList.get(i).getQuantity();
                        row[7] = pList.get(i).getCategory();
                        row[8] = pList.get(i).getRackNo();
                        row[9] = pList.get(i).getIsbnNo();
                        row[10] = pList.get(i).getPurchaseDay() + "-" + pList.get(i).getPurchaseMonth() + "-" + pList.get(i).getPurchaseYear();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(180);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(9).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(10).setPreferredWidth(80);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                } else if (cmbSubCategory.getSelectedItem().equals("Author")) {
                    BookInformationService bookInformationService = new BookInformationService();
                    List<BookInformation> pList = bookInformationService.getListByAuthor(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"Accession No", "Book Name", "Author", "Publisher", "Edition", "Price", "Quantity", "Category", "Rack No.", "ISBN No", "Purchase Date"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);
                    Object[] row = new Object[11];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getBookId();
                        row[1] = pList.get(i).getBookName();
                        row[2] = pList.get(i).getAuthor();
                        row[3] = pList.get(i).getPublisher();
                        row[4] = pList.get(i).getEdition();
                        row[5] = pList.get(i).getPrice();
                        row[6] = pList.get(i).getQuantity();
                        row[7] = pList.get(i).getCategory();
                        row[8] = pList.get(i).getRackNo();
                        row[9] = pList.get(i).getIsbnNo();
                        row[10] = pList.get(i).getPurchaseDay() + "-" + pList.get(i).getPurchaseMonth() + "-" + pList.get(i).getPurchaseYear();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(180);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(9).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(10).setPreferredWidth(80);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                } else if (cmbSubCategory.getSelectedItem().equals("Publisher")) {
                    BookInformationService bookInformationService = new BookInformationService();
                    List<BookInformation> pList = bookInformationService.getListByPublisher(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"Accession No", "Book Name", "Author", "Publisher", "Edition", "Price", "Quantity", "Category", "Rack No.", "ISBN No", "Purchase Date"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);
                    Object[] row = new Object[11];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getBookId();
                        row[1] = pList.get(i).getBookName();
                        row[2] = pList.get(i).getAuthor();
                        row[3] = pList.get(i).getPublisher();
                        row[4] = pList.get(i).getEdition();
                        row[5] = pList.get(i).getPrice();
                        row[6] = pList.get(i).getQuantity();
                        row[7] = pList.get(i).getCategory();
                        row[8] = pList.get(i).getRackNo();
                        row[9] = pList.get(i).getIsbnNo();
                        row[10] = pList.get(i).getPurchaseDay() + "-" + pList.get(i).getPurchaseMonth() + "-" + pList.get(i).getPurchaseYear();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(180);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(80);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(9).setPreferredWidth(120);
                    tblDisplay.getColumnModel().getColumn(10).setPreferredWidth(80);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                }

            } else if (cmbMainCategory.getSelectedItem().equals("Student Info")) {
                if (cmbSubCategory.getSelectedItem().equals("Name")) {
                    StudentService studentService = new StudentService();
                    List<Student> pList = studentService.getListByName(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"ID", "Student Name", "Reg. No.", "Roll No.", "Department", "Shift", "Session", "Phone No", "Address"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);

                    Object[] row = new Object[9];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getId();
                        row[1] = pList.get(i).getName();
                        row[2] = pList.get(i).getRegistrationNo();
                        row[3] = pList.get(i).getRollNo();
                        row[4] = pList.get(i).getDepartment();
                        row[5] = pList.get(i).getShift();
                        row[6] = pList.get(i).getSession();
                        row[7] = pList.get(i).getPhoneNo();
                        row[8] = pList.get(i).getHouseNo() + ", " + pList.get(i).getRoadNo() + ", " + pList.get(i).getBlockOrVillage() + ", " + pList.get(i).getThana() + ", " + pList.get(i).getDistrict() + ", " + pList.get(i).getDivision() + ", " + pList.get(i).getCountry();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(140);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(20);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(350);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                } else if (cmbSubCategory.getSelectedItem().equals("Roll No")) {
                    StudentService studentService = new StudentService();
                    List<Student> pList = studentService.getListByRollNo(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"ID", "Student Name", "Reg. No.", "Roll No.", "Department", "Shift", "Session", "Phone No", "Address"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }
                    model.setRowCount(0);

                    Object[] row = new Object[9];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getId();
                        row[1] = pList.get(i).getName();
                        row[2] = pList.get(i).getRegistrationNo();
                        row[3] = pList.get(i).getRollNo();
                        row[4] = pList.get(i).getDepartment();
                        row[5] = pList.get(i).getShift();
                        row[6] = pList.get(i).getSession();
                        row[7] = pList.get(i).getPhoneNo();
                        row[8] = pList.get(i).getHouseNo() + ", " + pList.get(i).getRoadNo() + ", " + pList.get(i).getBlockOrVillage() + ", " + pList.get(i).getThana() + ", " + pList.get(i).getDistrict() + ", " + pList.get(i).getDivision() + ", " + pList.get(i).getCountry();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(140);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(20);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(350);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                } else if (cmbSubCategory.getSelectedItem().equals("Reg No")) {
                    StudentService studentService = new StudentService();
                    List<Student> pList = studentService.getListByRegNo(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"ID", "Student Name", "Reg. No.", "Roll No.", "Department", "Shift", "Session", "Phone No", "Address"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);

                    Object[] row = new Object[9];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getId();
                        row[1] = pList.get(i).getName();
                        row[2] = pList.get(i).getRegistrationNo();
                        row[3] = pList.get(i).getRollNo();
                        row[4] = pList.get(i).getDepartment();
                        row[5] = pList.get(i).getShift();
                        row[6] = pList.get(i).getSession();
                        row[7] = pList.get(i).getPhoneNo();
                        row[8] = pList.get(i).getHouseNo() + ", " + pList.get(i).getRoadNo() + ", " + pList.get(i).getBlockOrVillage() + ", " + pList.get(i).getThana() + ", " + pList.get(i).getDistrict() + ", " + pList.get(i).getDivision() + ", " + pList.get(i).getCountry();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(140);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(20);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(350);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
                } else if (cmbSubCategory.getSelectedItem().equals("Phone No")) {
                    StudentService studentService = new StudentService();
                    List<Student> pList = studentService.getListByPhoneNo(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"ID", "Student Name", "Reg. No.", "Roll No.", "Department", "Shift", "Session", "Phone No", "Address"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);

                    Object[] row = new Object[9];

                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getId();
                        row[1] = pList.get(i).getName();
                        row[2] = pList.get(i).getRegistrationNo();
                        row[3] = pList.get(i).getRollNo();
                        row[4] = pList.get(i).getDepartment();
                        row[5] = pList.get(i).getShift();
                        row[6] = pList.get(i).getSession();
                        row[7] = pList.get(i).getPhoneNo();
                        row[8] = pList.get(i).getHouseNo() + ", " + pList.get(i).getRoadNo() + ", " + pList.get(i).getBlockOrVillage() + ", " + pList.get(i).getThana() + ", " + pList.get(i).getDistrict() + ", " + pList.get(i).getDivision() + ", " + pList.get(i).getCountry();

                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(140);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(20);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(350);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
                }

            } else if (cmbMainCategory.getSelectedItem().equals("Isuue Or Return Info")) {
                if (cmbSubCategory.getSelectedItem().equals("Issue ID")) {
                    BookIssueReturnService bookIssRetSer = new BookIssueReturnService();
                    List<BookIssueReturn> pList = bookIssRetSer.getListIssueReturnByIssueId(txtSearch.getText());
                    DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                    model.setColumnCount(0);
                    String columnAdd[] = {"Issue ID", "Accession No", "Book Title", "Student ID", "Student Name", "Issue Date", "Return Date", "Return Status", "Expire Date"};
                    for (String a : columnAdd) {
                        model.addColumn(a);
                    }

                    model.setRowCount(0);
                    Object[] row = new Object[9];
                    for (int i = 0; i < pList.size(); i++) {
                        row[0] = pList.get(i).getId();
                        row[1] = pList.get(i).getBookId();
                        row[2] = pList.get(i).getBookName();
                        row[3] = pList.get(i).getStudentId();
                        row[4] = pList.get(i).getStudentName();
                        row[5] = pList.get(i).getIssueDate();
                        row[6] = pList.get(i).getReturnDate();
                        row[7] = pList.get(i).getStatus();
                        row[8] = pList.get(i).getExpireDay() + "-" + pList.get(i).getExpireMonth() + "-" + pList.get(i).getExpireYear();
                        model.addRow(row);
                    }

                    tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                    tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(60);
                    tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(180);
                    tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                    tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(100);
                    tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(110);
                    tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(110);
                    tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(50);
                    tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(80);
                    tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                } else if (cmbSubCategory.getSelectedItem().equals("Accession No")) {
                    if (cmbDeSubCategory.getSelectedItem().equals("Returned")) {
                        BookIssueReturnService bookIssRetSer = new BookIssueReturnService();
                        List<BookIssueReturn> pList = bookIssRetSer.getListIssueReturnByBookIdReturned(txtSearch.getText());
                        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                        model.setColumnCount(0);
                        String columnAdd[] = {"Issue ID", "Accession No", "Book Title", "Student ID", "Student Name", "Issue Date", "Return Date", "Return Status", "Expire Date"};
                        for (String a : columnAdd) {
                            model.addColumn(a);
                        }

                        model.setRowCount(0);
                        Object[] row = new Object[9];
                        for (int i = 0; i < pList.size(); i++) {
                            row[0] = pList.get(i).getId();
                            row[1] = pList.get(i).getBookId();
                            row[2] = pList.get(i).getBookName();
                            row[3] = pList.get(i).getStudentId();
                            row[4] = pList.get(i).getStudentName();
                            row[5] = pList.get(i).getIssueDate();
                            row[6] = pList.get(i).getReturnDate();
                            row[7] = pList.get(i).getStatus();
                            row[8] = pList.get(i).getExpireDay() + "-" + pList.get(i).getExpireMonth() + "-" + pList.get(i).getExpireYear();
                            model.addRow(row);
                        }

                        tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                        tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(60);
                        tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(180);
                        tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                        tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(100);
                        tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(50);
                        tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(80);
                        tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                    } else if (cmbDeSubCategory.getSelectedItem().equals("Not Returned")) {
                        BookIssueReturnService bookIssRetSer = new BookIssueReturnService();
                        List<BookIssueReturn> pList = bookIssRetSer.getListIssueReturnByBookIdNotReturned(txtSearch.getText());
                        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                        model.setColumnCount(0);
                        String columnAdd[] = {"Issue ID", "Accession No", "Book Title", "Student ID", "Student Name", "Issue Date", "Return Date", "Return Status", "Expire Date"};
                        for (String a : columnAdd) {
                            model.addColumn(a);
                        }

                        model.setRowCount(0);
                        Object[] row = new Object[9];
                        for (int i = 0; i < pList.size(); i++) {
                            row[0] = pList.get(i).getId();
                            row[1] = pList.get(i).getBookId();
                            row[2] = pList.get(i).getBookName();
                            row[3] = pList.get(i).getStudentId();
                            row[4] = pList.get(i).getStudentName();
                            row[5] = pList.get(i).getIssueDate();
                            row[6] = pList.get(i).getReturnDate();
                            row[7] = pList.get(i).getStatus();
                            row[8] = pList.get(i).getExpireDay() + "-" + pList.get(i).getExpireMonth() + "-" + pList.get(i).getExpireYear();
                            model.addRow(row);
                        }

                        tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                        tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(60);
                        tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(180);
                        tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                        tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(100);
                        tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(50);
                        tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(80);
                        tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                    }
                } else if (cmbSubCategory.getSelectedItem().equals("Student ID")) {
                    if (cmbDeSubCategory.getSelectedItem().equals("Returned")) {
                        BookIssueReturnService bookIssRetSer = new BookIssueReturnService();
                        List<BookIssueReturn> pList = bookIssRetSer.getListIssueReturnByStuIdReturned(txtSearch.getText());
                        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                        model.setColumnCount(0);
                        String columnAdd[] = {"Issue ID", "Accession No", "Book Title", "Student ID", "Student Name", "Issue Date", "Return Date", "Return Status", "Expire Date"};
                        for (String a : columnAdd) {
                            model.addColumn(a);
                        }

                        model.setRowCount(0);
                        Object[] row = new Object[9];
                        for (int i = 0; i < pList.size(); i++) {
                            row[0] = pList.get(i).getId();
                            row[1] = pList.get(i).getBookId();
                            row[2] = pList.get(i).getBookName();
                            row[3] = pList.get(i).getStudentId();
                            row[4] = pList.get(i).getStudentName();
                            row[5] = pList.get(i).getIssueDate();
                            row[6] = pList.get(i).getReturnDate();
                            row[7] = pList.get(i).getStatus();
                            row[8] = pList.get(i).getExpireDay() + "-" + pList.get(i).getExpireMonth() + "-" + pList.get(i).getExpireYear();
                            model.addRow(row);
                        }

                        tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                        tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(60);
                        tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(180);
                        tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                        tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(100);
                        tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(50);
                        tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(80);
                        tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

                    } else if (cmbDeSubCategory.getSelectedItem().equals("Not Returned")) {
                        BookIssueReturnService bookIssRetSer = new BookIssueReturnService();
                        List<BookIssueReturn> pList = bookIssRetSer.getListIssueReturnByStuIdNotReturned(txtSearch.getText());
                        DefaultTableModel model = (DefaultTableModel) tblDisplay.getModel();
                        model.setColumnCount(0);
                        String columnAdd[] = {"Issue ID", "Accession No", "Book Title", "Student ID", "Student Name", "Issue Date", "Return Date", "Return Status", "Expire Date"};
                        for (String a : columnAdd) {
                            model.addColumn(a);
                        }

                        model.setRowCount(0);
                        Object[] row = new Object[9];
                        for (int i = 0; i < pList.size(); i++) {
                            row[0] = pList.get(i).getId();
                            row[1] = pList.get(i).getBookId();
                            row[2] = pList.get(i).getBookName();
                            row[3] = pList.get(i).getStudentId();
                            row[4] = pList.get(i).getStudentName();
                            row[5] = pList.get(i).getIssueDate();
                            row[6] = pList.get(i).getReturnDate();
                            row[7] = pList.get(i).getStatus();
                            row[8] = pList.get(i).getExpireDay() + "-" + pList.get(i).getExpireMonth() + "-" + pList.get(i).getExpireYear();
                            model.addRow(row);
                        }

                        tblDisplay.getColumnModel().getColumn(0).setPreferredWidth(10);
                        tblDisplay.getColumnModel().getColumn(1).setPreferredWidth(60);
                        tblDisplay.getColumnModel().getColumn(2).setPreferredWidth(180);
                        tblDisplay.getColumnModel().getColumn(3).setPreferredWidth(40);
                        tblDisplay.getColumnModel().getColumn(4).setPreferredWidth(100);
                        tblDisplay.getColumnModel().getColumn(5).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(6).setPreferredWidth(110);
                        tblDisplay.getColumnModel().getColumn(7).setPreferredWidth(50);
                        tblDisplay.getColumnModel().getColumn(8).setPreferredWidth(80);
                        tblDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
                    }
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_buttonSearchActionPerformed

    public void setAppIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/gov/npi/lms/images/lms-icon.png")));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSearch;
    private javax.swing.JComboBox<String> cmbDeSubCategory;
    private javax.swing.JComboBox<String> cmbMainCategory;
    private javax.swing.JComboBox<String> cmbSubCategory;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JTable tblDisplay;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
